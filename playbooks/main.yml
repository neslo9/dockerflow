
---
- name: Container Security & Deployment Pipeline
  hosts: localhost
  connection: local
  become: yes
  collections:
    - community.docker
    - community.postgresql
    - community.kubernetes

  vars:
    project: "project"
    project_root: "/home/admin/{{ project }}"
    repo_name: "my-repo"
    repo_dir: "{{ project_root }}/{{ repo_name }}"
    harbor_url: "harbor.app.dockerflow.local:30090"
    gitea_url: "gitea.app.dockerflow.local:30080"
    token: ""
    expected_network: "{{ repo_name }}_app_net"
    backup_dir: "{{ project_root }}/backup/{{ repo_name }}"
    timestamp: "{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"
    log_file: "/var/log/dockerflow/history.csv"
    service_summaries: {}
    docker_env:
      DOCKER_HOST: tcp://192.168.49.2:2376
      DOCKER_TLS_VERIFY: "1"
      DOCKER_CERT_PATH: "/home/admin/.minikube/certs"

  tasks:
    - name: Ensure directories exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ repo_dir }}"
        - "{{ backup_dir }}"
        - "/var/log/dockerflow"

    - name: Clone repository
      git:
        repo: "http://gitea_admin:{{ token }}@{{ gitea_url }}/gitea_admin/{{ repo_name }}.git"
        dest: "{{ repo_dir }}"
        version: main
        force: yes

    - name: Discover all k8sâ€‘service dirs
      set_fact:
        built_services: >-
          {{
            lookup('fileglob', repo_dir + '/k8s/*', wantlist=True)
            | map('basename')
            | list
          }}

    - name: Insert new deployment record into image_deploy
      community.postgresql.postgresql_query:
        db:           "{{ DB_NAME }}"
        login_host:   "{{ DB_HOST }}"
        login_port:   "{{ DB_PORT | int }}"
        login_user:   "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        query: |
          INSERT INTO image_deploy (status)
          VALUES ('pending')
          RETURNING id;
      register: deploy_insert_result


    - name: Process each service
      include_tasks: process_service.yml
      vars:
        service: "{{ repo_name }}"
        deploy_id: "{{ deploy_id }}"

    - name: Display final deployment summary
      debug:
        msg: |
          {% for name, summary in service_summaries.items() %}
          === Service: {{ name }} ===
          Build:   {{ summary.build_status | upper }}
          Deploy:  {{ summary.status | upper }}
          Checks:  {{ summary.security_checks | to_json }}
          Vulns:   critical={{ summary.critical_vulns }}, high={{ summary.high_vulns }}
          {% endfor %}

    - name: Prepare list of summaries
      set_fact:
        summaries_list: "{{ service_summaries | dict2items }}"

    - name: DEBUG - Show summaries_list
      debug:
        var: summaries_list

    - name: Insert each service into service_details
      loop: "{{ summaries_list }}"
      loop_control:
        loop_var: svc
      vars:
        svc_name: "{{ svc.key }}"
        summary: "{{ svc.value }}"
        checks_json: "{{ summary.security_checks | to_json }}"
        vuln_json: >-
          {{
            {
              "critical": summary.critical_vulns | int,
              "high":     summary.high_vulns   | int,
              "list":     summary.issues
            } | to_json
          }}
      community.postgresql.postgresql_query:
        db: "{{ DB_NAME }}"
        login_host: "{{ DB_HOST }}"
        login_port: "{{ DB_PORT | int }}"
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        query: |
          INSERT INTO image_details (
            repo_name,
            image_deploy_id,
            build_status,
            deploy_status,
            security_checks,
            vulnerabilities,
            project,
            image_name,
            image_tag
          )
          VALUES (
            '{{ svc_name }}',
            {{ deploy_id }},
            '{{ summary.build_status }}',
            '{{ summary.status }}',
            '{{ checks_json }}'::jsonb,
            '{{ vuln_json }}'::jsonb,
            '{{ project }}',
            '{{ svc_name }}',
            'latest'
          );

    - name: Update main image_deploy status
      community.postgresql.postgresql_query:
        db: "{{ DB_NAME }}"
        login_host: "{{ DB_HOST }}"
        login_port: "{{ DB_PORT | int }}"
        login_user: "{{ DB_USER }}"
        login_password: "{{ DB_PASSWORD }}"
        query: |
          UPDATE image_deploy
          SET status = '{{
            (service_summaries.values()
               | map(attribute="status")
               | select("equalto","failed")
               | list
               | length > 0)
              | ternary("failed","success") }}
          '
          WHERE id = {{ deploy_id }};
